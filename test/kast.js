const kast   = require('../lib/kast.js')
const assert = require('assert')

var callData
var flattenedCallData
var wordStack
var wordStackPatternLinear
var wordStackPatternNonLinear
var pattern1
var pattern2

describe('testing KAST format', function() {

  beforeEach(function() {
    callData = {"node":"KApply","label":"<callData>","variable":false,"arity":1,"args":[{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KToken","sort":"Int","token":"10"},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KToken","sort":"Int","token":"249"},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KToken","sort":"Int","token":"213"},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KToken","sort":"Int","token":"224"},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"0"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"1"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"2"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"3"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"4"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"5"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"6"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"7"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"8"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"9"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"10"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"11"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"12"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"13"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"14"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"15"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"16"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"17"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"18"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"19"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"20"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"21"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"22"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"23"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"24"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"25"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"26"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"27"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"28"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"29"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"30"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"31"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_++__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"#padToWidth","variable":false,"arity":2,"args":[{"node":"KToken","sort":"Int","token":"32"},{"node":"KApply","label":"#asByteStack","variable":false,"arity":1,"args":[{"node":"KApply","label":"#unsigned","variable":false,"arity":1,"args":[{"node":"KVariable","name":"Delta_D"}]}]}]},{"node":"KApply","label":".WordStack_EVM-DATA","variable":false,"arity":0,"args":[]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}]}
    flattenedCallData = {"node":"KApply","label":"<callData>","variable":false,"arity":1,"args":[{"node":"KApply","label":"_:__EVM-DATA","variable":false,"arity":37,"args":[{"node":"KToken","sort":"Int","token":"10"},{"node":"KToken","sort":"Int","token":"249"},{"node":"KToken","sort":"Int","token":"213"},{"node":"KToken","sort":"Int","token":"224"},{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"0"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"1"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"2"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"3"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"4"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"5"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"6"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"7"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"8"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"9"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"10"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"11"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"12"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"13"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"14"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"15"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"16"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"17"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"18"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"19"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"20"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"21"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"22"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"23"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"24"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"25"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"26"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"27"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"28"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"29"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"30"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"nthbyteof","variable":false,"arity":3,"args":[{"node":"KVariable","name":"V_u"},{"node":"KToken","sort":"Int","token":"31"},{"node":"KToken","sort":"Int","token":"32"}]},{"node":"KApply","label":"_++__EVM-DATA","variable":false,"arity":2,"args":[{"node":"KApply","label":"#padToWidth","variable":false,"arity":2,"args":[{"node":"KToken","sort":"Int","token":"32"},{"node":"KApply","label":"#asByteStack","variable":false,"arity":1,"args":[{"node":"KApply","label":"#unsigned","variable":false,"arity":1,"args":[{"node":"KVariable","name":"Delta_D"}]}]}]},{"node":"KApply","label":".WordStack_EVM-DATA","variable":false,"arity":0,"args":[]}]}]}]}
    wordStack                 = kast.KApply("_:__EVM-DATA", [ kast.KInt(1)        , kast.KApply("_:__EVM-DATA", [ kast.KInt(3)        , kast.KApply(".WordStack_EVM-DATA", []) ]) ])
    wordStackPatternLinear    = kast.KApply("_:__EVM-DATA", [ kast.KVariable("x") , kast.KApply("_:__EVM-DATA", [ kast.KVariable("x") , kast.KApply(".WordStack_EVM-DATA", []) ]) ])
    wordStackPatternNonLinear = kast.KApply("_:__EVM-DATA", [ kast.KVariable("x") , kast.KApply("_:__EVM-DATA", [ kast.KVariable("y") , kast.KApply(".WordStack_EVM-DATA", []) ]) ])

    pattern1 = v => { return kast.KApply("<callData>", [ v ]) }
    pattern2 = v => { return kast.KApply("_+_", [ kast.KInt(0) , v ]) }
  })

  it('omitArgs should not do anything to tokens', function() {
    assert.deepEqual(kast.omitArgs(kast.KInt(1)), kast.KInt(1))
  })
  it('omitArgs should remove the arguments to the node `<callData>`', function() {
    assert.deepEqual(kast.omitArgs(callData), kast.KApply("<callData>", []))
  })

  it('visitChildren should not do anything to tokens', function() {
    assert.deepEqual(kast.visitChildren(kast.KInt(1), (arg => {})), kast.KInt(1))
  })
  it('visitChildren should be able to replace children with other children', function() {
    assert.deepEqual(kast.visitChildren(callData, (arg => kast.KInt(1))), kast.KApply("<callData>", [kast.KInt(1)]))
  })

  it('visitTopDown should ignore non-KApplys', function() {
    assert.deepEqual(kast.KInt(1), kast.visitTopDown(kast.KInt(1), kast.omitArgs))
  })
  it('visitBottomUp should ignore non-KApplys', function() {
    assert.deepEqual(kast.KInt(1), kast.visitBottomUp(kast.KInt(1), kast.omitArgs))
  })

  it('flattenKLabel of `_:__EVM-DATA`', function() {
    assert.deepEqual(flattenedCallData, kast.visitBottomUp(callData, kast.flattenKLabel("_:__EVM-DATA")))
  })
  it('flattenKLabels of `_:__EVM-DATA`', function() {
    assert.deepEqual(flattenedCallData, kast.flattenKLabels(["_:__EVM-DATA"])(callData))
  })

  it('variables should match anything', function() {
    assert.deepEqual(kast.match(kast.KVariable("test"), kast.KInt(1)), {"test" : kast.KInt(1)})
    assert.deepEqual(kast.match(kast.KVariable("test"), callData), {"test" : callData})
    assert.deepEqual(kast.match(kast.KVariable("test"), flattenedCallData), {"test" : flattenedCallData})
  })

  it('simple nested pattern matches should succeed', function() {
    assert.deepEqual(kast.match(pattern1(kast.KInt(3)), pattern1(kast.KInt(3)))                            , {})
    assert.deepEqual(kast.match(pattern1(kast.KInt(3)), pattern1(kast.KInt(4)))                            , null)
    assert.deepEqual(kast.match(pattern1(kast.KVariable("x")), pattern1(kast.KInt(3)))                     , {"x": kast.KInt(3)})
    assert.deepEqual(kast.match(pattern1(kast.KVariable("x")), pattern1(pattern1(kast.KInt(3))))           , {"x": pattern1(kast.KInt(3))})
    assert.deepEqual(kast.match(pattern1(pattern2(kast.KVariable("x"))), pattern1(pattern2(kast.KInt(3)))) , {"x": kast.KInt(3)})
  })

  it('non-linear matches should behave correctly', function() {
    assert.deepEqual(kast.match(wordStackPatternNonLinear, wordStack) , { "x": kast.KInt(1) , "y": kast.KInt(3) })
    assert.deepEqual(kast.match(wordStackPatternLinear,    wordStack) , null)
  })

  it('substitution should traverse and substitute variables', function() {
    assert.deepEqual(kast.substitute(pattern1(kast.KInt(3)),        {"x": kast.KInt(100)}), pattern1(kast.KInt(3)))
    assert.deepEqual(kast.substitute(pattern1(kast.KVariable("x")), {"x": kast.KInt(100)}), pattern1(kast.KInt(100)))
    assert.deepEqual(kast.substitute(pattern1(kast.KVariable("x")), {"y": kast.KInt(100)}), pattern1(kast.KVariable("x")))

    assert.deepEqual(kast.substitute(kast.KApply("dummy", [pattern1(kast.KVariable("x")) , kast.KVariable("y")]), {"y": kast.KInt(100)                    }), kast.KApply("dummy", [pattern1(kast.KVariable("x")) , kast.KInt(100)]))
    assert.deepEqual(kast.substitute(kast.KApply("dummy", [pattern1(kast.KVariable("x")) , kast.KVariable("y")]), {"y": kast.KInt(100) , "x": kast.KInt(3)}), kast.KApply("dummy", [pattern1(kast.KInt(3)) , kast.KInt(100)]))
    assert.deepEqual(kast.substitute(kast.KApply("dummy", [pattern1(kast.KVariable("x")) , kast.KVariable("x")]), {"y": kast.KInt(100) , "x": kast.KInt(3)}), kast.KApply("dummy", [pattern1(kast.KInt(3)) , kast.KInt(3)]))
  })

  it('rewriting should do what we expect', function() {
    assert.deepEqual(kast.KInt(4), kast.rewriteTopRequire(kast.KInt(3), kast.KInt(4), (subst => true))(kast.KInt(3)))
    assert.deepEqual(kast.KInt(4), kast.rewriteTop(kast.KInt(3), kast.KInt(4))(kast.KInt(3)))
    assert.deepEqual(kast.KInt(4), kast.rewrite(kast.KInt(3), kast.KInt(4))(kast.KInt(3)))

    assert.deepEqual(pattern1(kast.KInt(4)), kast.rewrite(kast.KInt(3), kast.KInt(4))(pattern1(kast.KInt(3))))
    assert.deepEqual(pattern1(kast.KInt(4)), kast.rewrite(pattern1(kast.KVariable("x")), pattern1(kast.KInt(4)))(pattern1(kast.KInt(3))))
  })
})
