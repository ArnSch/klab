#!/usr/bin/env node
const xs = require("xstream").default;
const {run} = require("@cycle/run");
const {docopt} = require("docopt");
const fs = require("fs");
const path = require("path");
const makeConfig = require("../lib/config.js");
process.title = "klab";
// TODO - klab run should send the config.json to the server

const makeCliDriver = require("../lib/driver/cliDriver.js")
const remoteDriver = require("../lib/driver/remoteDriver.js")
const makeDumpDriver = require("../lib/driver/dumpDriver.js");
const main = require("../lib/main.js")
const {
  testPath,
  revert,
  warn,
  read,
  sha3
} = require("../lib/util.js");

const usage = `
Usage:
  klab run [options]

Options:
  --force               No replay
  --inspect=<id>
  --clean
  --spec=<spec>
  --name=<name>
  --headless
  --filter-oog
`

const KLAB_OUT = process.env.KLAB_OUT || "out";

const cmd = docopt(usage, {
  argv: ["run"].concat(process.argv.slice(2))
});

const config_json = JSON.parse(fs.readFileSync("./config.json"));
const config      = makeConfig(config_json);

try {
  config.out = JSON.parse(fs.readFileSync(path.join(KLAB_OUT, "out.json")))
} catch(e) {
}

const specs       = fs.readdirSync(path.join(KLAB_OUT, "specs"));
const spec_names  = specs.map(s => s.slice(0, -2))

config.spec = cmd["--spec"] && (
    testPath(cmd["--spec"]) && read(cmd["--spec"])
    || revert(`spec not found at ${cmd["--spec"]}`))
  || cmd["--name"] && (cmd["--name"] in spec_names)
    && read(path.join(KLAB_OUT, `specs/${cmd["name"]}.k`))
  || revert("no --spec or --name provided. Try `klab run --spec out/specs/SOME_SPEC`");

config.name = cmd["--spec"] && path.basename(cmd["--spec"])
  || cmd["--name"] && (name + ".k")

config.rules = testPath(path.join(KLAB_OUT, "rules.k")) && read(path.join(KLAB_OUT, "rules.k"))
  || revert(`no rules found at ${KLAB_OUT}/rules.k`)

config.smt_prelude = testPath(path.join(KLAB_OUT, "prelude.smt2")) && read(path.join(KLAB_OUT, "prelude.smt2"))
  || revert(`no smt prelude file at ${KLAB_OUT}/prelude.mst2`)

config.FILTER_OOG = cmd["--filter-oog"] || false;

// proof id
config.proofid = sha3(JSON.stringify({
  rules: config.rules,
  spec : config.spec,
  smt_prelude: config.smt_prelude
}));

config.connection = {
  type: "remote",
  host: config.host || "127.0.0.1:8080"
}

const kDriver = remoteDriver(config.host);
// const inspect = cmd["--inspect"];
// if(inspect) config.inspect = inspect;

config.force = cmd["--force"];

const CLIDriver = cmd["--headless"]
  ? () => xs.of()
  : makeCliDriver({
    // type: "console",
    // in: false
  })
config.headless = cmd["--headless"]

let claim_hash = config.out[config.name.slice(0,-2)].hash;
let deps = config.out.dep_graph[claim_hash] || [];
const deps_status = deps
.map(hash => testPath(path.join(KLAB_OUT, "pass", hash)))


let all_dependency_passing = deps_status
  .reduce((a, b) => a && b, true)

if(!all_dependency_passing) {
  // XXX - generate this during build time?
  const hash2name = Object.keys(config.out)
    .filter(key => key !== "dep_graph")
    .reduce((a, key) => ({...a, [config.out[key].hash]: key }), {})

  deps_status
    .forEach((status, i) => {
      if(!status) warn(`ERROR: Proof of ${hash2name[deps[i]]} required first`);
    })

  process.exit();
}


const dumpDriver  = makeDumpDriver(config);

const drivers = {
  CLI: CLIDriver,
  K: kDriver,
  Settings: () => xs.of(config),
  Dump: dumpDriver
};

run(main, drivers)
