#!/usr/bin/env node
const xs = require("xstream").default;
const {run} = require("@cycle/run");
const {docopt} = require("docopt");
const fs = require("fs");
const keccak = require("keccak");
const sha3 = function (str) {
  return keccak('keccak256')
    .update(str)
    .digest('hex')
    .toString()
}
process.title = "klab";

const makeCliDriver = require("../lib/driver/cliDriver.js")
const remoteDriver = require("../lib/driver/remoteDriver.js")
const localDriver  = require("../lib/driver/localDriver.js");
const main = require("../lib/main.js")
const testPath = path => {
  try {
    fs.accessSync(path, fs.constants.F_OK);
    return true;
  } catch (e) {
    return false;
  }
}


const usage = `
Usage:
  klab run [options]

Options:
  --force               No replay
  --remote
  --inspect=<id>
`

const cmd = docopt(usage, {
  argv: ["run"].concat(process.argv.slice(2))
});


const config = JSON.parse(fs.readFileSync("./config.json"));
if (testPath(config.source + ".json")) {
    config.solJson = JSON.parse(fs.readFileSync(config.source + ".json"));
    contract_path = config.source.replace('/','').replace('.','') + config.source.replace('./',':').replace('.sol','')
    contract_json = config.solJson.contracts[contract_path]
    config["bin_runtime"] = contract_json["bin-runtime"].toString();
    config["sourcemap"] = contract_json["srcmap-runtime"].toString();
}
else {
    config["bin_runtime"] = fs.readFileSync(config["bin_runtime"]).toString()
    config["sourcemap"] = fs.readFileSync(config["sourcemap"]).toString()
}



// READ the spec files
[
  "spec",
  "lemmas",
  "source",
  "prelude"
].forEach(filetype => {
  if(!(filetype in config)) return null;
  let content = fs.readFileSync(config[filetype]).toString()
  config[filetype] = content;
})


// proof id
config.proofid = sha3(JSON.stringify({
  lemmas: config.lemmas,
  bin_runtime: config.bin_runtime,
  spec: config.spec,
  prelude: config.prelude
}))

const kDriver = cmd["--remote"]
  ? remoteDriver(config.host)
  : localDriver
  ;

const inspect = cmd["--inspect"];
if(inspect) config.inspect = inspect;

config.force = cmd["--force"];

const drivers = {
  CLI: makeCliDriver(),
  K: kDriver,
  Settings: () => xs.of(config)
};

run(main, drivers)
