#!/usr/bin/env node
const xs = require("xstream").default;
const {run} = require("@cycle/run");
const {docopt} = require("docopt");
const fs = require("fs");
const keccak = require("keccak");
const sha3 = function (str) {
  return keccak('keccak256')
    .update(str)
    .digest('hex')
    .toString()
}
const makeConfig = require("../lib/config.js");
process.title = "klab";

const makeCliDriver = require("../lib/driver/cliDriver.js")
const remoteDriver = require("../lib/driver/remoteDriver.js")
const main = require("../lib/main.js")
const testPath = path => {
  try {
    fs.accessSync(path, fs.constants.F_OK);
    return true;
  } catch (e) {
    return false;
  }
}


const usage = `
Usage:
  klab run [options]

Options:
  --force               No replay
  --inspect=<id>
  --clean
  --trust=<trust-spec, trust-bin>
  --spec=<spec>
  --headless
`

const cmd = docopt(usage, {
  argv: ["run"].concat(process.argv.slice(2))
});


// TODO - add --implements to cmd

const config_json = JSON.parse(fs.readFileSync("./config.json"));
const config = makeConfig(config_json);

if(cmd["--spec"]) {
    config.spec = cmd["--spec"];

}

if(cmd["--trust"]) {
    config.trust = true;
    config.trustSpec = fs.readFileSync(cmd["--trust"].split(',')[0]).toString();
    config.trustBin  = fs.readFileSync(cmd["--trust"].split(',')[1]).toString();
}

// console.log(config.spec);


// READ the spec files
[ "spec", "lemmas", "prelude" ].forEach(filetype => {
  if(!(filetype in config)) return null;
  let content = fs.readFileSync(config[filetype]).toString()
  config[filetype] = content;
})


// proof id
config.proofid = sha3(JSON.stringify({
  lemmas: config.lemmas,
  contracts: config.contracts,
  spec: config.spec,
  prelude: config.prelude
}));

config.connection = {
  type: "remote",
  host: config.host
}

const kDriver = remoteDriver(config.host);
const inspect = cmd["--inspect"];
if(inspect) config.inspect = inspect;

config.force = cmd["--force"];
//config.spec  = cmd["--spec" ];
//config.trust = cmd["--trust" ];
config.force = cmd["--force"];
config.clean = cmd["--clean"];

const CLIDriver = cmd["--headless"]
  ? () => xs.of()
  : makeCliDriver()
config.headless = cmd["--headless"]

const drivers = {
  CLI: CLIDriver,
  K: kDriver,
  Settings: () => xs.of(config)
};

run(main, drivers)
