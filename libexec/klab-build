#!/usr/bin/env node

const fs            = require("fs");
const path          = require("path");
const marked        = require("marked");
const {docopt}      = require("docopt");
const clc           = require("cli-color");
const _             = require("lodash");
const kjson         = require("../lib/kjson.js");
const Config        = require("../lib/config.js");
const {
  makePrelude,
  makeRules,
  makeRunScript,
  getActs,
  parseAct,
  buildAct
}                   = require("../lib/build.js");
const {
  read,
  testPath,
  revert,
  ensureDirs
}                   = require("../lib/util.js");

const KLAB_OUT = process.env.KLAB_OUT || "out";

const usage = `
Usage:
  klab build [options]

Options:
  --spec=<spec>
  --filter=<filter>
  --trust
`
const cmd = docopt(usage, {
  argv: ["build"].concat(process.argv.slice(2))
});

const warn          = str => console.log(clc.xterm(214)(str))
const config_json   = JSON.parse(fs.readFileSync("./config.json"));
const config        = Config(config_json);
const config_path   = cmd["--spec"] || config.src.specification;
const filter_subject= cmd["--filter"] || null;

const raw_md_config = read(config_path)

ensureDirs([KLAB_OUT, path.join(KLAB_OUT, "specs"), path.join(KLAB_OUT, "acts")]);
// TODO - do i need this?
// fs.writeFileSync(path.join("out/", path.basename(config_path, ".md") + ".acts"), acts_str);

config.trusted = cmd["--trust"];

const acts_str_arr = getActs(raw_md_config);


// searches and adds abi variables with "ABI_" prefix

let act_objects = acts_str_arr
  .map(parseAct)



let acts = act_objects
  .map(buildAct(config))
  .reduce((a, cs) => a.concat(cs), [])

const out = acts
  //For some reason, the above code generates a list of lists.
  //Below applies the multiplication of the monad
  .reduce((a, act) => ({...a, [act.name]: {v2n: act.v2n, act: act.act}}), {})


//Add the imported rules from the calls field
acts.forEach(rule => {
    let imports = [];
    rule.imports.forEach(name => {
        console.log('Importing ' + name + ' to ' + rule.name + ' spec' + (config.trusted ? ' as a trusted lemma' : ''))
        let importing = acts.filter(rul => rul.name.slice(0,-5) == name)
            .map(rule => rule.spec + (config.trusted ? '\n[trusted]\n' : '\n'))
        if (importing.length == 0) {
            warn(`Act "${name}" not found!`);
        }
        imports.push(importing)
    })
    rule.imports = imports[0];
})

acts.forEach(rule => {
  let _rules      = [rule.spec].concat(rule.imports)
  let module      = kjson.renderModule(_rules, rule.name)
  let module_path = path.join(KLAB_OUT, "specs", `proof-${rule.name}.k`)

  let old_module  = "";
  if(testPath(module_path)) old_module = read(module_path);
  if(old_module != module) {
    console.log("write to " + module_path);
    fs.writeFileSync(module_path, module);
  }
})

fs.writeFileSync(path.join(KLAB_OUT, "out.json"), JSON.stringify(out, false, 2))
makeRunScript();
// RULES
makeRules(config);
// prelude
makePrelude(config);
