#!/usr/bin/env node

const fs = require("fs");
const path = require("path");
const AWS = require('aws-sdk');
const {docopt}      = require("docopt");
const makeConfig        = require("../lib/config.js");
const {
  testPath,
  revert,
  read,
  sha3
} = require("../lib/util.js");
const config_json   = JSON.parse(fs.readFileSync("./config.json"));
const KLAB_OUT      = process.env.KLAB_OUT || "out";

const usage = `
Usage:
  klab publish [options] <spec>
`

const cmd = docopt(usage, {
  argv: ["publish"].concat(process.argv.slice(2))
});
const config        = makeConfig(config_json, cmd["<spec>"]);

config.rules = testPath(path.join(KLAB_OUT, "rules.k")) && read(path.join(KLAB_OUT,"rules.k"))
  || revert("no rules found at ${KLAB_OUT}/rules.k")

config.smt_prelude = testPath(path.join(KLAB_OUT, "prelude.smt2")) && read(path.join(KLAB_OUT, "prelude.smt2"))
  || revert(`no smt prelude file at ${KLAB_OUT}/prelude.mst2`)

const proofid = sha3(JSON.stringify({
  rules: config.rules,
  spec : config.spec,
  smt_prelude: config.smt_prelude
}));

// TODO - check if env variable are set correctly
// AWS.config.update({ accessKeyId: process.env.KLAB_PUBLISH_ID, secretAccessKey: process.env.KLAB_PUBLISH_SECRET });
const s3 = new AWS.S3();

const KLAB_LOG_PATH = path.join(KLAB_OUT, "log");
const pruned_path = path.join(KLAB_LOG_PATH, `boot_${proofid}.json`);
const boot_json_str = read(pruned_path);

console.log(`uploading`);

const push = (name, data, cb) => s3.putObject({
  Bucket: 'dapphub-klab-player',
  Key: name,
  Body: data,
  ACL: 'public-read'
}, cb);

push(`boot_${proofid}.json`, boot_json_str, (err, res) => {
  console.log("ready");
})
