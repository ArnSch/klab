#!/usr/bin/env node

const fs            = require("fs");
const path = require("path");
const {docopt}      = require("docopt");

const Config        = require("../lib/config.js");
const {
  testPath,
  revert,
  read,
  sha3
} = require("../lib/util.js");
const config_json   = JSON.parse(fs.readFileSync("./config.json"));
const config        = Config(config_json);
const KLAB_OUT      = process.env.KLAB_OUT || "out";

const usage = `
Usage:
  klab hash [options]

Options:
  --spec=<spec>
`

const cmd = docopt(usage, {
  argv: ["hash"].concat(process.argv.slice(2))
});

try {
  config.out = JSON.parse(fs.readFileSync(path.join(KLAB_OUT, "out.json")))
} catch(e) {
}

config.spec = cmd["--spec"] && (
    testPath(cmd["--spec"]) && read(cmd["--spec"])
    || revert(`spec not found at ${cmd["--spec"]}`))

config.name = cmd["--spec"] && path.basename(cmd["--spec"])
  || cmd["--name"] && ("proof-" + name + ".k")

config.rules = testPath(path.join(KLAB_OUT, "rules.k")) && read(path.join(KLAB_OUT, "rules.k"))
  || revert(`no rules found at ${KLAB_OUT}/rules.k`)

config.smt_prelude = testPath(path.join(KLAB_OUT, "prelude.smt2")) && read(path.join(KLAB_OUT, "prelude.smt2"))
  || revert(`no smt prelude file at ${KLAB_OUT}/prelude.mst2`)


const proofid = sha3(JSON.stringify({
  rules: config.rules,
  spec : config.spec,
  smt_prelude: config.smt_prelude
}));

process.stdout.write(proofid)
