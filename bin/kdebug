#!/usr/bin/env node
// TODO - external src + bytecode analyzer
//        allow to place "breakpoints?"/ pc instructions which shold be highlighted/ never hit
const usage = `
Usage:
  kdebug <debugfile>
`

const {docopt} = require("docopt");

const xml2json = require("xml2json");

const fs = require("fs");
const _ = require("lodash");
const jsondiffpatch = require("jsondiffpatch").create({
   textDiff: {
        // default 60, minimum string length (left and right sides) to use text diff algorythm: google-diff-match-patch
        minLength: 10
    }
});
const clc = require('cli-color');
var clear = require("cli-clear");
const crypto = require('crypto');
const hash = string => {
  var md5sum = crypto.createHash('md5');
  md5sum.update(string);
  var d = md5sum.digest('hex');
  return d;
}

const { formatStep } = require("./../lib/formatter.js");
const {formatMemory} = require("./../lib/unwrapper.js");

var stdin = process.stdin;
stdin.setRawMode( true );
stdin.resume();
stdin.setEncoding( 'utf8' );
const tw = process.stdout.columns; // total width

const cmd = docopt(usage);

const jsonString = fs.readFileSync(cmd["<debugfile>"]).toString();
const json = JSON.parse(jsonString);

const getFileExcerpt = (path, from, to) => fs.readFileSync(path).toString().split("\n").slice(from - 1, to).filter(l => l != "").join("\n");

const { getCodeStringFromPc } = require("../lib/srchandler.js");

const settings = JSON.parse(fs.readFileSync("kdebug_sic_rpow.json"));




var step_position = 0;


const V = {};
const getNode = key => {
  if(key in V) return V[key];
  let node = JSON.parse(fs.readFileSync(`nodes/${key}.json`));
  // console.log(node.term.replace(/\<\-/g,"--").replace(/\&/g, "And"));
  let clean_term_string = node.term.replace(/\<\-/g,"--").replace(/\&/g, "And").replace(/s\<Word/g,"sLessWord")
  let term = xml2json.toJson(clean_term_string, {object: true})
  V[key] = {
    term,
    constraint: node.constraint
  };
  return V[key];
}

// build Nodes
// Object.keys(V).forEach(key => {
//   let term = _.omit(xml2json.toJson(V[key].term, {object: true}), settings.omit).generatedTop;
//   if(term.ethereum.evm.txExecState.wordStack.length > tw / 2) {
//     term.ethereum.evm.txExecState.wordStack = term.ethereum.evm.txExecState.wordStack.split(":").join("\n");
//   }
//   V[key].term = term;
// })


// build Edges
const E = {};
json.proofs[0].steps
.forEach(o => {
  if(!(o.from in E)) E[o.from] = [];
  E[o.from].push(o);
})

Object.keys(E).forEach(id => {
  E[id] = _.uniqBy(E[id], edge => edge.to);
})

// build Rules
const parseRule = ruleString => {
  const pos_regex = /Location\((\d+)\,\d+\,(\d+)\,\d+\)/;
  const src_regex = /Source\(Source\(([^\)]+)\)/;
  const location = ruleString.match(pos_regex);
  const filepath = ruleString.match(src_regex)[1];
  const from = location[1];
  const to = location[2];
  // let string = fs.readFileSync(filepath).toString();
  let string = clc.xterm(0)(`${filepath} ${from}-${to}\n     `) + getFileExcerpt(filepath, parseInt(from), parseInt(to)).split("\n").join("\n    ").trim();
  if(string.split("\n").length > 6) {
    string = string.split("\n").slice(0, 3)
    .concat([clc.red("  [...]")])
    .concat(string.split("\n").slice(-3))
    .join("\n")
  }

  return {
    from,
    to,
    filepath,
    string
  };
}

const R = {};
const getRule = key => {
  if(key in R) return R[key];
  let rule = fs.readFileSync(`rules/${key}.json`).toString();
  R[key] = parseRule(rule);
  return R[key];
}

const initial_id = json.proofs[0].initialTerm;
const target_id  = json.proofs[0].targetTerm;


var crashHash = ("crash" in json.proofs[0]) && json.proofs[0].crash || "";
var crashRule = ("crash" in json.proofs[0]) && json.proofs[0].crash_rule || "";
var crashMsg  = ("crash" in json.proofs[0]) && json.proofs[0].exception || "";
console.log("0");

var behaviour = "";
const genBehaviour = () => {
  let frontier = [{
    id: initial_id,
    path: "",
    leave: false
  }];
  let leaves = [];
  let terminate = false;
  let _visited = {
    [initial_id]: true
  };
  while (frontier.length > 0) {
    let next_frontier = [];
    frontier.forEach(e => {
      let next_steps = (E[e.id] || []);

      if(next_steps.length == 0) {
        e.leave = true;
        if( e.id === target_id ) e.path += clc.green(" âœ“");
        if( e.id === crashHash ) e.path += " ðŸ’¥";
        if( getNode(e.id).term.k === "#exception" ) e.path += clc.red(" âœ—e")
        if( getNode(e.id).term.k === "#revert" ) e.path += clc.red(" âœ—r")
        if( getNode(e.id).term.k === "#end" ) e.path += clc.blue(" âŠ¥")
        leaves.push(e);
        return null;
      }

      let next_frontier_steps = next_steps
        .map((step, i) => ({
          id: step.to,
          path: e.path + (next_steps.length > 1 ? i + "." : ""),
          leave: false
        }))
      next_frontier = next_frontier.concat(next_frontier_steps);
    });
    frontier = next_frontier;
  }
  behaviour = leaves
  .map(branch => branch.path)
  .sort()
  .join("\n")
}
genBehaviour();
console.log("1");

var show = {
  rule: false,
  constraint: false,
  source: false,
  debug: false,
  behaviour: false,
  trim: false,
  memory: false
};

const help = (show, slice) => {
  let format_toggle = is => is ? clc.green("T") : clc.red("F");
  let h_ = [
    "0-5/n next choice",
    "N next branching point",
    "Ctrl-c quit",
    "p previous",
    `${clc.underline("b")}ehaviour (${format_toggle(show.behaviour)})`,
    `${clc.underline("c")}onstraint (${format_toggle(show.constraint)})`,
    `${clc.underline("r")}ule (${format_toggle(show.rule)})`,
    `${clc.underline("s")}ource (${format_toggle(show.source)})`,
    `${clc.underline("m")}memory (${format_toggle(show.memory)})`,
  ];
  let h_a = h_.slice(0, Math.floor(h_.length / 2));
  let h_b = h_.slice(Math.floor(h_.length / 2));
  let h_as = h_a.join("     ");
  let h_bs = h_b.join("     ");
  return [h_as, h_bs];
}

var draw = path => {
  let step = path[path.length - 1].step;
  let node_id = step.to;
  let node = getNode(node_id);
  let isSuccess = node_id == target_id;
  let isCrash   = node_id == crashHash;

  let term_ = _.omit(node.term, settings.omit).generatedTop;
  term_ = JSON.parse(JSON.stringify(term_));
  if(term_.ethereum.evm.txExecState.wordStack.length > tw / 2) {
    term_.ethereum.evm.txExecState.wordStack = term_.ethereum.evm.txExecState.wordStack.split(": ").join("\n");
  }
  let node_term = term_;

// help
  let help_strings = help(show, 2);
  let help_display = help_strings.map(help_string => {
    let prefix = (tw - clc.getStrippedLength(help_string)) / 2
    console.log(" ".repeat(prefix) + help_string );
  })
  console.log("-".repeat(tw));

// behaviour path
  let step_counter = step.step; //path.length;
  let format_path = "root.";
  path.forEach(s => {
    if(s.type === "branch") format_path += s.branch + ".";
  });
  let format_step = "step: " + step_counter;
  let format_feedback = (isCrash ? " ðŸ’¥" : "") + (isSuccess ? clc.green(" âœ“") : "")
  let lhs = 'Behaviour: ' + format_path + format_feedback;
  let rhs = format_step;
  let nav = lhs + " ".repeat(tw - (lhs.length + rhs.length)) + rhs;
  console.log(nav + "\n");

// term
  let previous_node_id = null;
  let term;
  if(show.trim) {
    const trim = o => {
      if( typeof o == "object" ) {
        let o_ = {};
        Object.keys(o).forEach(k => {
          o_[k] = trim(o[k])
        })
        return o_;
      }
      else if(typeof o == "string" ) {
        return o.slice(0, 110)
      }
      return o;
    }
    node_term = trim(node_term);
  }
  if(path.length > 1) {
    term = formatStep(node_term, getNode(step.from).term);
  } else {
    term = formatStep(node_term, {});
  }
  console.log(term);
// source code
  if(show.source) console.log(`\n${clc.bold(clc.underline("s")+"ource")}:\n` + getCodeStringFromPc(node_term.ethereum.evm.txExecState.pc));

// memory
  if(show.memory) {
    let memory_string = node.term.generatedTop.ethereum.evm.txExecState.localMem;
    let formatted_memory = formatMemory(memory_string);
    console.log(`${clc.bold(clc.underline("m") + "emory")}:` + formatted_memory);
  }

// debug
  if(show.debug) console.log(`\ndebug:\nnode_id: ${node_id}\npath length: ${path.length}`);

// constraint
  let constraint;
  if(path.length > 1) {
    if(node.constraint !== getNode(step.from).constraint) {
      constraint = clc.yellow(node.constraint);
    } else {
      constraint = node.constraint;
    }
  } else {
    constraint = node.constraint;
  }
  constraint = constraint
    .split("\n")
    .join("")
    .split("#And")
    .map(s => "  " + s.replace(/ ==K true/g,"").trim())
    .join("\n")
    .replace(/115792089237316195423570985008687907853269984665640564039457584007913129639936/g,"pow256")
    .replace(/1461501637330902918203684832716283019655932542976/g,"pow160")
    .replace(/Int/g,"")
  if(show.constraint) console.log(`\n${clc.bold(clc.underline("c")+"onstraint")}:\n  `+constraint.split("\n").join("\n  "));

// Rule
  if(show.rule) {
    let rule = getRule(step.rule) || "";
    if(rule && rule.string) console.log(`\n${clc.bold(clc.underline("r") + "ule")}:\n  ` + rule.string);
  }

// global Behaviour
  if(show.behaviour) {
    let filtered = behaviour
      .split("\n")
      .filter(b => b.indexOf(format_path.slice(5)) == 0)
      .map(b => clc.green(format_path.slice(5)) + b.slice(format_path.length - 5))
      .join("\n  ")
    console.log(`\n${clc.bold(clc.underline("b") + "ehaviour")}:\n  ` + filtered);
  }

  let next_steps = E[node_id];
// Branching
  if(next_steps && next_steps.length > 1) {
    let pc = node_term.ethereum.evm.txExecState.pc;
    let printSemantics = key => key in settings.semantic && clc.green(settings.semantic[key].text) + "\n    " || "";
    let branching_string = next_steps.map(({rule}, i) => i + ". "+printSemantics(pc +":"+ getRule(rule).from)+" " + getRule(rule).string).join("\n  ");
    console.log(`\n${clc.bold("branching")}: ${next_steps.length}\n  ${branching_string}`);
  }

// terminal
  if(isSuccess) {
    console.log(clc.green(` âœ“ Target Term Reached!`));
  }

// crash
  if(isCrash) {
    let ruleString = parseRule(crashRule).string;
    console.log(clc.red("\nCrash occurred during rule:\n") + ruleString);
    console.log("\n" + crashMsg.split("\n").slice(1).join("\n"));
  }
}

var path = [];
path.push({
  type: "step",
  step: {
    from: "",
    to: initial_id,
    rule: "",
    step: 0
  }
})

var state = "step"; // step, behaviour
const doStepState = (key) => {
  let id = path[path.length - 1].step.to;
  let steps = E[id];
  switch(key) {
    case "0":
    case "1":
    case "2":
    case "3":
    case "4":
    case "5":
      let index = parseInt(key) || 0;
      while(steps && steps.length === 1) {
        path.push({
          type: "step",
          step: steps[0]
        })
        steps = E[steps[0].to];
      }
      if(steps.length <= index) console.error("wrong index")
      path.push({
        type: "branch",
        branch: index,
        step: steps[index]
      })
      break;
    case "n":
      if(steps && steps.length === 1) {
        path.push({
          type: "step",
          step: steps[0]
        });
      }
      break;
    case "N":
      while(steps && steps.length === 1) {
        path.push({
          type: "step",
          step: steps[0]
        })
        let node_id = steps[0].to;
        let node = getNode(node_id);
        if(node.term.generatedTop.k === "#execute") break;
        steps = E[steps[0].to];
      }
      break;
    case "\u000e":
      while(steps && steps.length === 1) {
        path.push({
          type: "step",
          step: steps[0]
        })
        steps = E[steps[0].to];
      }
      break;
    case "p":
      if(path.length > 1) {
        path.pop();
      }
      break;
    case "\u0010":
      if(path.length > 1) path.pop();
      while(path.length > 1 && E[path[path.length - 1].step.to].length == 1) {
        path.pop();
      }
      break;
    case "b":
    case "B":
      show.behaviour = !show.behaviour;
      break;
    case "m":
    case "M":
      show.memory = !show.memory;
      break;
    case "t":
    case "T":
      show.trim = !show.trim;
      break;
    case "r":
    case "R":
      show.rule = !show.rule;
      break;
    case "C":
    case "c":
      show.constraint = !show.constraint;
      break;
    case "S":
    case "s":
      show.source = !show.source;
      break;
    case "\u0003":
      process.exit();
      break;
    case "d":
    case "D":
      show.debug = !show.debug;
      break;
    default:
      console.log("key: " + key + " "+key.split("").map(s => s.charCodeAt(0).toString(16)).join(""));
  }
}

stdin.on( 'data', function (key,a) {
  doStepState(key)
  clear();
  draw(path);
})

clear();
draw(path);
